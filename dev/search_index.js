var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = FiniteHorizonGramians","category":"page"},{"location":"#FiniteHorizonGramians","page":"Home","title":"FiniteHorizonGramians","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for FiniteHorizonGramians.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [FiniteHorizonGramians]","category":"page"},{"location":"#FiniteHorizonGramians.ExpAndGram","page":"Home","title":"FiniteHorizonGramians.ExpAndGram","text":"ExpAndGram{T,N,A,B,C} <: AbstractExpAndGramAlgorithm\n\nNon-adaptive algorithm of order N for computing the matrix exponential and an associated Gramian. \n\nConstructor: \n\nExpAndGram{T,N}()\n\ncreates an algorithm with coefficients stored in the numeric type T of order N. \n\n\n\n\n\n","category":"type"},{"location":"#FiniteHorizonGramians._dims_if_compatible-Tuple{AbstractMatrix, AbstractMatrix}","page":"Home","title":"FiniteHorizonGramians._dims_if_compatible","text":"_dims_if_compatible(A::AbstractMatrix, B::AbstractMatrix)\n\nThrows DimensionMismatch if A is not square or if the number of rows of B does not equal  the number of columns of A.  Is equivalent to size(B) if no error is thrown. \n\n\n\n\n\n","category":"method"},{"location":"#FiniteHorizonGramians._exp_and_gram_chol_init-Union{Tuple{q}, Tuple{T}, Tuple{AbstractMatrix{T}, AbstractMatrix{T}, ExpAndGram{T, q}}} where {T, q}","page":"Home","title":"FiniteHorizonGramians._exp_and_gram_chol_init","text":"_exp_and_gram_init(A::AbstractMatrix{T}, B::AbstractMatrix{T}, L::LegendreExp{T})\n\nComputes the matrix exponential exp(A) and the controllability Grammian âˆ«_0^1 exp(At)BB'exp(A'*t) dt,  using a Legendre expansion of the matrix exponential.   \n\n\n\n\n\n","category":"method"},{"location":"#FiniteHorizonGramians._symmetrize!-Union{Tuple{AbstractMatrix{T}}, Tuple{T}} where T<:Number","page":"Home","title":"FiniteHorizonGramians._symmetrize!","text":"_symmetrize!(A::AbstractMatrix{T}) where {T<:Number}\n\nDiscards the skew-Hermitian part of A in-place. \n\n\n\n\n\n","category":"method"},{"location":"#FiniteHorizonGramians.exp_and_gram","page":"Home","title":"FiniteHorizonGramians.exp_and_gram","text":"exp_and_gram(A::AbstractMatrix, B::AbstractMatrix, alg::AbstractExpAndGramAlgorithm)\n\nCompute the matrix exponential exp(A) and the controllability Gramian of (A, B) over the unit interval.\n\n\n\n\n\n","category":"function"},{"location":"#FiniteHorizonGramians.exp_and_gram_chol","page":"Home","title":"FiniteHorizonGramians.exp_and_gram_chol","text":"exp_and_gram_chol(A::AbstractMatrix, B::AbstractMatrix, alg::AbstractExpAndGramAlgorithm)\n\nCompute the matrix exponential exp(A) and a upper triangular Cholesky factor of the controllability Gramian of (A, B) over the unit interval.\n\n\n\n\n\n","category":"function"},{"location":"#FiniteHorizonGramians.triu2cholesky_factor!-Union{Tuple{AbstractMatrix{T}}, Tuple{T}} where T<:Number","page":"Home","title":"FiniteHorizonGramians.triu2cholesky_factor!","text":"triu2cholesky_factor!(A::AbstractMatrix{T})\n\nIf A is an upper triangular matrix, it computes the product QA in-place,  where Q is a unitary transform such that QA is a valid Cholesky factor.  If A is not an upper triangular matrix, returns garbage. \n\n\n\n\n\n","category":"method"}]
}
