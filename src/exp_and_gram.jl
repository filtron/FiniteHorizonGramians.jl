"""
    ExpAndGram{T,N,A,B,C} <: AbstractExpAndGramAlgorithm

Non-adaptive algorithm of order N for computing the matrix exponential and an associated Gramian. 

Constructor: 

ExpAndGram{T,N}()

creates an algorithm with coefficients stored in the numeric type T of order N. 
Current supported values of N are 3, 5, 7, 9, 13. 

"""
struct ExpAndGram{T,N,A,B} <: AbstractExpAndGramAlgorithm where {T,N,A,B}
    pade_num::A
    gram_coeffs::B
    normtol::T
end

function exp_and_gram(
    A::AbstractMatrix{T},
    B::AbstractMatrix{T},
    method::ExpAndGram,
) where {T<:Number}
    Φ, G = exp_and_gram!(copy(A), copy(B), method)
    return Φ, G
end

function exp_and_gram!(
    A::AbstractMatrix{T},
    B::AbstractMatrix{T},
    method::ExpAndGram,
) where {T<:Number}
    Φ, U = exp_and_gram_chol!(A, B, method)
    G = U' * U
    _symmetrize!(G)
    return Φ, G
end

exp_and_gram_chol(
    A::AbstractMatrix{T},
    B::AbstractMatrix{T},
    method::ExpAndGram{T},
) where {T<:Number} = exp_and_gram_chol!(copy(A), copy(B), method)

function exp_and_gram_chol!(
    A::AbstractMatrix{T},
    B::AbstractMatrix{T},
    method::ExpAndGram{T,q},
) where {T<:Number,q}

    n, m = _dims_if_compatible(A::AbstractMatrix, B::AbstractMatrix) # first checks that (A, B) have compatible dimensions
    normA = opnorm(A, 1)
    sexp = log2(normA / method.normtol) # power required for accuracy of exp 
    sgram = n <= q + 1 ? 0 : ceil(Int, log2((n - 1) / q)) # power requried for rank equivalence
    s = max(sexp, sgram)

    if s > 0
        si = ceil(Int, s)
        A ./= convert(T, 2^si) # this mutates A
        B ./= convert(T, sqrt(2^si))
    end

    Φ, U = _exp_and_gram_chol_init(A, B, method)

    # should pre-allocate here 
    if s > 0
        Φ, U = _exp_and_gram_double(Φ, U, si)
    end

    triu2cholesky_factor!(U)
    return Φ, U
end


function _gram_coeffs(method::ExpAndGram)
    (; pade_num, leg_nums, sqr_norms) = method
    gram_coeffs = copy(leg_nums)
    for row in axes(gram_coeffs, 1)
        gram_coeffs[row, :] .= gram_coeffs[row, :] / sqrt(sqr_norms[row])
    end
    return gram_coeffs
end


function _exp_and_gram_double(Φ0, U0, s)
    Φ = Φ0
    m, n = size(U0)
    U = similar(Φ)
    U[1:m, 1:n] .= U0

    pre_array = similar(Φ, 2n, n)
    tmp = similar(Φ)
    for _ = 1:s
        sub_array = view(pre_array, 1:2m, 1:n)
        mul!(view(sub_array, 1:m, 1:n), view(U, 1:m, 1:n), Φ')
        sub_array[m+1:2m, 1:n] .= U[1:m, 1:n]
        m = min(n, 2 * m) # new row-size of U 
        U[1:m, 1:n] .= qr!(sub_array).R

        mul!(tmp, Φ, Φ)
        Φ .= tmp
    end
    return Φ, U
end



"""
    _exp_and_gram_init(A::AbstractMatrix{T}, B::AbstractMatrix{T}, L::LegendreExp{T})
    
Computes the matrix exponential exp(A) and the controllability Grammian ∫_0^1 exp(A*t)*B*B'*exp(A'*t) dt, 
using a Legendre expansion of the matrix exponential.   
"""
function _exp_and_gram_chol_init(
    A::AbstractMatrix{T},
    B::AbstractMatrix{T},
    method::ExpAndGram{T,q},
) where {T,q}

    n, m = _dims_if_compatible(A::AbstractMatrix, B::AbstractMatrix) # first checks that (A, B) have compatible dimensions
    isodd(q) || throw(DomainError(q, "The degree $(q) must be odd")) # code heavily assumes odd degree expansion 

    # fetch expansion coefficients 
    pade_num = method.pade_num
    gram_coeffs = method.gram_coeffs
    ncoeffhalf = div(q + 1, 2)

    A2 = A * A
    P = A2

    odd = mul!(pade_num[4] * P, true, pade_num[2] * I, true, true) # odd part of the pade numerator 
    even = mul!(pade_num[3] * P, true, pade_num[1] * I, true, true) # even part of the pade numerator 

    L = zeros(T, n, m * (q + 1)) # left square-root of the Grammian
    Leven = view(L, :, 1:m*ncoeffhalf)
    Lodd = view(L, :, m*ncoeffhalf+1:m*2*ncoeffhalf)

    # initialize zeroth block 
    L0 = view(Leven, 1:n, 1:m)
    L0 .= B
    mul!(L0, P, B, gram_coeffs[1, 3], gram_coeffs[1, 1])

    # initialize first block (contains only A if deg < 4, else A and A^3)
    L1 = view(Lodd, 1:n, 1:m)
    L1 .= B
    mul!(L1, P, B, q < 4 ? false : gram_coeffs[2, 4], gram_coeffs[2, 2])

    # initialize second block (contains only A^2)
    L2 = view(Leven, 1:n, m+1:2m)
    mul!(L2, P, B, gram_coeffs[3, 3], true)

    # initialize third block (contains only A^3) 
    L3 = view(Lodd, 1:n, m+1:2m)
    mul!(L3, P, B, gram_coeffs[4, 4], true)

    for k = 2:(div(length(pade_num), 2)-1)
        P *= A2
        mul!(even, pade_num[2k+1], P, true, true)
        mul!(odd, pade_num[2k+2], P, true, true)

        for i = 0:div(q - 1, 2)
            Leveni = view(Leven, 1:n, i*m+1:(i+1)*m)
            gram_coeffs[2i+1, 2k+1] != 0 &&
                mul!(Leveni, P, B, gram_coeffs[2i+1, 2k+1], true)
            Loddi = view(Lodd, 1:n, i*m+1:(i+1)*m)
            gram_coeffs[2i+2, 2k+2] != 0 && mul!(Loddi, P, B, gram_coeffs[2i+2, 2k+2], true)
        end
    end

    odd = A * odd
    den = even - odd # pade denominator 
    num = even + odd # pade numerator

    Lodd .= A * Lodd

    F = lu!(den)
    expA = num
    ldiv!(F, expA)
    ldiv!(F, L)

    U = qr!(L').R # right Cholesky factor of the Grammian (may not be square!!)
    U = triu2cholesky_factor!(U)
    return expA, U
end


function _exp_and_gram_chol_init(
    A::AbstractMatrix{T},
    B::AbstractMatrix{T},
    method::ExpAndGram{T,13},
) where {T}

    n, m = size(B)
    n == LinearAlgebra.checksquare(A) || throw(
        DimensionMismatch(
            "size of A, $(LinearAlgebra.checksquare(A)), incompatible with the size of B, $(size(B)).",
        ),
    )

    # fetch expansion coefficients 
    pade_num = method.pade_num
    gram_coeffs = method.gram_coeffs
    q = 13

    A2 = A * A
    A4 = A2 * A2
    A6 = A2 * A4
    tmpA1, tmpA2 = similar(A6), similar(A6)

    tmpA1 .= pade_num[14] .* A6 .+ pade_num[12] .* A4 .+ pade_num[10] .* A2
    tmpA2 .= pade_num[8] .* A6 .+ pade_num[6] .* A4 .+ pade_num[4] .* A2
    mul!(tmpA2, true, pade_num[2] * I, true, true)
    U = mul!(tmpA2, A6, tmpA1, true, true)
    U = mul!(tmpA1, A, U) # U is odd terms 

    #tmpA1 = A # not good 
    tmpA1 = similar(A6) # quick fix 

    tmpA1 .= pade_num[13] .* A6 .+ pade_num[11] .* A4 .+ pade_num[9] .* A2
    tmpA2 .= pade_num[7] .* A6 .+ pade_num[5] .* A4 .+ pade_num[3] .* A2
    mul!(tmpA2, true, pade_num[1] * I, true, true)
    V = mul!(tmpA2, A6, tmpA1, true, true) # V is even terms 

    tmpA1 .= V .+ U # numerator 
    tmpA2 .= V .- U  # denominator 
    num = tmpA1
    den = tmpA2

    L = similar(A, n, m * (q + 1))

    A2B = A2 * B
    A4B = A4 * B
    A6B = A6 * B

    tmpB2 = similar(B)

    # L0 
    L0 = view(L, 1:n, 1:m)
    L0 .= gram_coeffs[1, 3] .* A2B + gram_coeffs[1, 5] .* A4B + gram_coeffs[1, 7] .* A6B # low order terms 
    mul!(L0, gram_coeffs[1, 1] * I, B, true, true) # add constant term in A 
    tmpB2 .=
        gram_coeffs[1, 9] .* A2B + gram_coeffs[1, 11] .* A4B + gram_coeffs[1, 13] .* A6B # high order terms bar factor 6 
    mul!(L0, A6, tmpB2, true, true)

    # L2 
    L2 = view(L, 1:n, 2m+1:3m)
    L2 .= gram_coeffs[3, 3] .* A2B + gram_coeffs[3, 5] .* A4B + gram_coeffs[3, 7] .* A6B # low order terms 
    tmpB2 .=
        gram_coeffs[3, 9] .* A2B + gram_coeffs[3, 11] .* A4B + gram_coeffs[3, 13] .* A6B # high order terms bar factor 6 
    mul!(L2, A6, tmpB2, true, true)

    # L4 
    L4 = view(L, 1:n, 4m+1:5m)
    L4 .= gram_coeffs[5, 5] .* A4B + gram_coeffs[5, 7] .* A6B # low order terms 
    tmpB2 .=
        gram_coeffs[5, 9] .* A2B + gram_coeffs[5, 11] .* A4B + gram_coeffs[5, 13] .* A6B # high order terms bar factor 6 
    mul!(L4, A6, tmpB2, true, true)

    # L6 
    L6 = view(L, 1:n, 6m+1:7m)
    L6 .= gram_coeffs[7, 7] .* A6B # low order terms 
    tmpB2 .=
        gram_coeffs[7, 9] .* A2B + gram_coeffs[7, 11] .* A4B + gram_coeffs[7, 13] .* A6B # high order terms bar factor 6 
    mul!(L6, A6, tmpB2, true, true)

    # L8 
    L8 = view(L, 1:n, 8m+1:9m)
    tmpB2 .=
        gram_coeffs[9, 9] .* A2B + gram_coeffs[9, 11] .* A4B + gram_coeffs[9, 13] .* A6B # high order terms bar factor 6 
    mul!(L8, A6, tmpB2, true, false)

    # L10 
    L10 = view(L, 1:n, 10m+1:11m)
    tmpB2 .= gram_coeffs[11, 11] .* A4B + gram_coeffs[11, 13] .* A6B # high order terms bar factor 6 
    mul!(L10, A6, tmpB2, true, false)

    # L12 
    L12 = view(L, 1:n, 12m+1:13m)
    tmpB2 .= gram_coeffs[11, 13] .* A6B # high order terms bar factor 6 
    L12 .= mul!(L12, A6, tmpB2, true, false)

    # L1 
    L1 = view(L, 1:n, m+1:2m)
    L1 .= gram_coeffs[2, 4] .* A2B + gram_coeffs[2, 6] .* A4B + gram_coeffs[2, 8] .* A6B # low order terms 
    mul!(L1, gram_coeffs[2, 2] * I, B, true, true) # add constant term in A 
    tmpB2 .= gram_coeffs[2, 10] .* A2B + gram_coeffs[2, 12] .* A4B # high order terms bar factor 6 
    mul!(L1, A6, tmpB2, true, true)
    mul!(tmpB2, A, L1, true, false)
    L1 .= tmpB2

    # L3 
    L3 = view(L, 1:n, 3m+1:4m)
    L3 .= gram_coeffs[4, 4] .* A2B + gram_coeffs[4, 6] .* A4B + gram_coeffs[4, 8] .* A6B # low order terms 
    tmpB2 .= gram_coeffs[4, 10] .* A2B + gram_coeffs[4, 12] .* A4B # high order terms bar factor 6 
    mul!(L3, A6, tmpB2, true, true)
    mul!(tmpB2, A, L3, true, false)
    L3 .= tmpB2

    # L5 
    L5 = view(L, 1:n, 5m+1:6m)
    L5 .= gram_coeffs[6, 6] .* A4B + gram_coeffs[6, 8] .* A6B # low order terms 
    tmpB2 .= gram_coeffs[6, 10] .* A2B + gram_coeffs[6, 12] .* A4B # high order terms bar factor 6 
    mul!(L5, A6, tmpB2, true, true)
    mul!(tmpB2, A, L5, true, false)
    L5 .= tmpB2

    # L7 
    L7 = view(L, 1:n, 7m+1:8m)
    L7 .= gram_coeffs[8, 8] .* A6B # low order terms 
    tmpB2 .= gram_coeffs[8, 10] .* A2B + gram_coeffs[8, 12] .* A4B # high order terms bar factor 6 
    mul!(L7, A6, tmpB2, true, true)
    mul!(tmpB2, A, L7, true, false)
    L7 .= tmpB2

    # L9 
    L9 = view(L, 1:n, 9m+1:10m)
    tmpB2 .= gram_coeffs[10, 10] .* A2B + gram_coeffs[10, 12] .* A4B # high order terms bar factor 6 
    mul!(L9, A6, tmpB2, true, false)
    mul!(tmpB2, A, L9, true, false)
    L9 .= tmpB2

    # L11 
    L11 = view(L, 1:n, 11m+1:12m)
    tmpB2 .= gram_coeffs[12, 12] .* A4B # high order terms bar factor 6 
    mul!(L11, A6, tmpB2, true, false)
    mul!(tmpB2, A, L11, true, false)
    L11 .= tmpB2

    # L13 
    L13 = view(L, 1:n, 13m+1:14m)
    tmpB2 .= gram_coeffs[14, 14] .* A6B # high order terms bar factor 6 
    mul!(L13, A6, tmpB2, true, false)
    mul!(tmpB2, A, L13, true, false)
    L13 .= tmpB2

    F = lu!(den)
    expA = num
    ldiv!(F, expA)
    ldiv!(F, L)

    U = qr!(L').R # right Cholesky factor of the Grammian (may not be square!!)
    U = triu2cholesky_factor!(U)
    return expA, U
end


# constructors 

function ExpAndGram{T,3}() where {T}
    pade_num = T[
        1.0,
        0.5,
        0.1000000000000000000000000000000000000000000000000000000000000000000000000000002,
        0.008333333333333333333333333333333333333333333333333333333333333333333333333333396,
    ]
    gramcs = T[
        1.0 0.0 0.01666666666666666666666666666666666666666666666666666666666666666666666666666679 0.0
        0.0 0.2886751345948128822545743902509787278238008756350634380093011632419888361514663 0.0 0.0
        0.0 0.0 0.0372677996249964949401528944788546039240103059935254287378482874235086820939633 0.0
        0.0 0.0 0.0 0.003149703941743560226787637801951500506797927598907678786152779118096510503845598
    ]
    normtol = T(0.00067)
    ExpAndGram{T,3,typeof(pade_num),typeof(gramcs)}(
        pade_num,
        gramcs,
        normtol,
    )
end

function ExpAndGram{T,5}() where {T}
    pade_num = T[
        1.0,
        0.5,
        0.1111111111111111111111111111111111111111111111111111111111111111111111111111109,
        0.01388888888888888888888888888888888888888888888888888888888888888888888888888886,
        0.0009920634920634920634920634920634920634920634920634920634920634920634920634920614,
        3.306878306878306878306878306878306878306878306878306878306878306878306878306896e-05,
    ]
    gramcs = T[
        1.0 0.0 0.02777777777777777777777777777777777777777777777777777777777777777777777777777772 0.0 6.613756613756613756613756613756613756613756613756613756613756613756613756613792e-05 0.0
        0.0 0.2886751345948128822545743902509787278238008756350634380093011632419888361514663 0.0 0.003207501495497920913939715447233096975820009729278482644547790702688764846127397 0.0 0.0
        0.0 0.0 0.0372677996249964949401528944788546039240103059935254287378482874235086820939633 0.0 0.0001478880937499860910323527558684706504921043888631961457851122516805900083093775 0.0
        0.0 0.0 0.0 0.003149703941743560226787637801951500506797927598907678786152779118096510503845598 0.0 0.0
        0.0 0.0 0.0 0.0 0.0001984126984126984126984126984126984126984126984126984126984126984126984126984127 0.0
        0.0 0.0 0.0 0.0 0.0 9.97061324661916741556918210879836064191645185662985088100854421030689226373577e-06
    ]
    normtol = T(0.021)
    ExpAndGram{T,5,typeof(pade_num),typeof(gramcs)}(
        pade_num,
        gramcs,
        normtol,
    )
end

function ExpAndGram{T,7}() where {T}
    pade_num = T[
        1.0,
        0.5,
        0.1153846153846153846153846153846153846153846153846153846153846153846153846153849,
        0.01602564102564102564102564102564102564102564102564102564102564102564102564102559,
        0.001456876456876456876456876456876456876456876456876456876456876456876456876456882,
        8.74125874125874125874125874125874125874125874125874125874125874125874125874123e-05,
        3.237503237503237503237503237503237503237503237503237503237503237503237503237496e-06,
        5.781255781255781255781255781255781255781255781255781255781255781255781255781243e-08,
    ]
    gramcs = T[
        1.0 0.0 0.03205128205128205128205128205128205128205128205128205128205128205128205128205117 0.0 0.0001748251748251748251748251748251748251748251748251748251748251748251748251748246 0.0 1.156251156251156251156251156251156251156251156251156251156251156251156251156249e-07 0.0
        0.0 0.2886751345948128822545743902509787278238008756350634380093011632419888361514663 0.0 0.004441155916843275111608836773091980428058475009770206738604633280645982094637986 0.0 1.081450304426122186268385577863306922416836447184303588945933428728729406161832e-05 0.0 0.0
        0.0 0.0 0.0372677996249964949401528944788546039240103059935254287378482874235086820939633 0.0 0.0003071521947115095736825788006499005817912937307158689181690792919519946326425524 0.0 2.585456184440316276789383843854382001610216588517415136103361043366958187226867e-07 0.0
        0.0 0.0 0.0 0.003149703941743560226787637801951500506797927598907678786152779118096510503845598 0.0 1.346027325531435994353691368355342096922191281584478113740503896622440386258784e-05 0.0 0.0
        0.0 0.0 0.0 0.0 0.0001984126984126984126984126984126984126984126984126984126984126984126984126984127 0.0 3.468753468753468753468753468753468753468753468753468753468753468753468753468787e-07 0.0
        0.0 0.0 0.0 0.0 0.0 9.97061324661916741556918210879836064191645185662985088100854421030689226373577e-06 0.0 0.0
        0.0 0.0 0.0 0.0 0.0 0.0 4.168922831178068798237897828410589348442410105918671852118313464576126360090177e-07 0.0
        0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.492713824064599322428830968330434847110035683950151247898541954231525839876548e-08
    ]
    normtol = T(0.13)
    ExpAndGram{T,7,typeof(pade_num),typeof(gramcs)}(
        pade_num,
        gramcs,
        normtol,
    )
end

function ExpAndGram{T,9}() where {T}
    pade_num = T[
        1.0,
        0.5,
        0.117647058823529411764705882352941176470588235294117647058823529411764705882353,
        0.01715686274509803921568627450980392156862745098039215686274509803921568627450993,
        0.001715686274509803921568627450980392156862745098039215686274509803921568627450982,
        0.0001225490196078431372549019607843137254901960784313725490196078431372549019607854,
        6.284565108094519859225741578682755153343388637506284565108094519859225741578683e-06,
        2.244487538605185664009193420958126840479781656252244487538605185664009193420958e-07,
        5.101108042284512872748166865813924637454049218755101108042284512872748166865825e-09,
        5.667897824760569858609074295348805152726721354172334564491427236525275740962028e-11,
    ]
    gramcs = T[
        1.0 0.0 0.03431372549019607843137254901960784313725490196078431372549019607843137254901985 0.0 0.0002450980392156862745098039215686274509803921568627450980392156862745098039215707 0.0 4.488975077210371328018386841916253680959563312504488975077210371328018386841916e-07 0.0 1.133579564952113971721814859069761030545344270834466912898285447305055148192406e-10 0.0
        0.0 0.2886751345948128822545743902509787278238008756350634380093011632419888361514663 0.0 0.005094267081084933216257195122076095196890603687677590082517079351329214755614157 0.0 2.02153455598608460962587108018892666543277924114190082639566640925762490302147e-05 0.0 1.727807312808619324466556478793954414899811317215299851620227700220192224804687e-08 0.0 0.0
        0.0 0.0 0.0372677996249964949401528944788546039240103059935254287378482874235086820939633 0.0 0.0003914684834558455350856396478871281924790998528731662682547089015074441396424731 0.0 8.699299632352123001903103286380626499535552286070361516771308922387647547610425e-07 0.0 2.534760965137564977244493964563119609421780969134720721669961807222508026693033e-10 0.0
        0.0 0.0 0.0 0.003149703941743560226787637801951500506797927598907678786152779118096510503845598 0.0 2.058630027283372697246822092778758501175116077717437115132535371304908826042829e-05 0.0 2.339352303731105337780479650884952842244450088315269449014244740119214575048713e-08 0.0 0.0
        0.0 0.0 0.0 0.0 0.0001984126984126984126984126984126984126984126984126984126984126984126984126984127 0.0 7.957728545963840081487140310669722434428316781257957728545963840081487140310662e-07 0.0 3.400738694856341915165444577209283091636032812503400738694856341915165444577217e-10 0.0
        0.0 0.0 0.0 0.0 0.0 9.97061324661916741556918210879836064191645185662985088100854421030689226373577e-06 0.0 2.255794852176282220717009526877457158804627116884581647287000952558120421659656e-08 0.0 0.0
        0.0 0.0 0.0 0.0 0.0 0.0 4.168922831178068798237897828410589348442410105918671852118313464576126360090177e-07 0.0 4.087179246253008625723429243539793478865107946979090051096385749584437607931509e-10 0.0
        0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.492713824064599322428830968330434847110035683950151247898541954231525839876548e-08 0.0 0.0
        0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 4.673868281339281349801943082305853443428393530685931300905242149252973726457001e-10 0.0
        0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.300304938970806822915700732738318033951976363882972360340642180102187367598858e-11
    ]
    normtol = T(0.41)
    ExpAndGram{T,9,typeof(pade_num),typeof(gramcs)}(
        pade_num,
        gramcs,
        normtol,
    )
end

function ExpAndGram{T,13}() where {T}
    pade_num = T[
        1.0,
        0.5,
        0.1200000000000000000000000000000000000000000000000000000000000000000000000000005,
        0.01833333333333333333333333333333333333333333333333333333333333333333333333333339,
        0.001992753623188405797101449275362318840579710144927536231884057971014492753623195,
        0.0001630434782608695652173913043478260869565217391304347826086956521739130434782602,
        1.035196687370600414078674948240165631469979296066252587991718426501035196687365e-05,
        5.175983436853002070393374741200828157349896480331262939958592132505175983436876e-07,
        2.043151356652500817260542661000326904217064400130761686825760052304674730304025e-08,
        6.306022705717595115001674879630638593262544444848029897610370531804551636740818e-10,
        1.483770048404140027059217618736620845473539869376007034731851889836365090997849e-11,
        2.52915349159796595521457548648287644114807932280001199102020208494834958692812e-13,
        2.810170546219962172460639429425418267942310358666679990022446761053721763253464e-15,
        1.544049750670308885967384301882097949418851845421252741770575143436110858930474e-17,
    ]
    gramcs = T[
        1.0 0.0 0.03666666666666666666666666666666666666666666666666666666666666666666666666666678 0.0 0.0003260869565217391304347826086956521739130434782608695652173913043478260869565205 0.0 1.035196687370600414078674948240165631469979296066252587991718426501035196687375e-06 0.0 1.261204541143519023000334975926127718652508888969605979522074106360910327348164e-09 0.0 5.058306983195931910429150972965752882296158645600023982040404169896699173856239e-13 0.0 3.088099501340617771934768603764195898837703690842505483541150286872221717860948e-17 0.0
        0.0 0.2886751345948128822545743902509787278238008756350634380093011632419888361514663 0.0 0.005773502691896257645091487805019574556476017512701268760186023264839776723029368 0.0 3.227423865035175081107042872371190745856158858031765145445603067301738540823845e-05 0.0 6.640789845751389055775808379364590012049709584427500299270788204324564898814546e-08 0.0 4.964705327266289664904162963041709040108933600798071395985936157539297920764448e-11 0.0 9.627741423270115704403677368535958060974014739750623263062578198201611998896871e-15 0.0 0.0
        0.0 0.0 0.0372677996249964949401528944788546039240103059935254287378482874235086820939633 0.0 0.0004791574237499549349448229290138449075944182199167555123437636954451116269223817 0.0 1.800376793478091543002555288833555745121270820943257426949192629155008796809817e-06 0.0 2.435574666501747217265361592036736668183537365994666432561137214765975103909367e-09 0.0 1.056495662160966115065946323902575188627908053496818868953645408371591282783123e-12 0.0 6.90520040628082428147677335884036070998632714703803182322644057759209988747144e-17 0.0
        0.0 0.0 0.0 0.003149703941743560226787637801951500506797927598907678786152779118096510503845598 0.0 2.799736837105386868255678046179111561598157865695714476580248104974676003418261e-05 0.0 7.262163238539170483370706394486331866793640708943923419983351062804866115585911e-08 0.0 6.333650129547506090502970865590730740270051202637295848581328329674573622523945e-11 0.0 1.38895836174287414265416027754182691672588842163098593170643165124442404002718e-14 0.0 0.0
        0.0 0.0 0.0 0.0 0.0001984126984126984126984126984126984126984126984126984126984126984126984126984127 0.0 1.262626262626262626262626262626262626262626262626262626262626262626262626262624e-06 0.0 2.262230523100088317479621827447914404436143566578349187044839218752262230523084e-09 0.0 1.196947366719623448401916310819002330389493950570555125420549851191673137842903e-12 0.0 9.264298504021853315804305811292587696513111072527516450623450860616665153582939e-17 0.0
        0.0 0.0 0.0 0.0 0.0 9.97061324661916741556918210879836064191645185662985088100854421030689226373577e-06 0.0 4.60182149843961573026269943483001260396143931844454656046548194321856566018572e-08 0.0 5.557755432898086630752052457524169811547632027106940290417248723693919879451399e-11 0.0 1.556794238907027067437549707989963532646395525800263386671498241931069994244077e-14 0.0 0.0
        0.0 0.0 0.0 0.0 0.0 0.0 4.168922831178068798237897828410589348442410105918671852118313464576126360090177e-07 0.0 1.389640943726022932745965942803529782814136701972890617372771154858708786696723e-09 0.0 1.066220672935567467580025020053859168399593377472806100286013673804635897721263e-12 0.0 1.113430109581837372159591708494004979531739115990816729621985874900413427027211e-16 0.0
        0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.492713824064599322428830968330434847110035683950151247898541954231525839876548e-08 0.0 3.512267821328468993950190513718670228494201609294473524467157539368296093827149e-11 0.0 1.506979900455578801752084030485699468747512132134356489330874230278159079159267e-14 0.0 0.0
        0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 4.673868281339281349801943082305853443428393530685931300905242149252973726457001e-10 0.0 7.379792023167286341792541708903979121202726627398838896166171814609958515458381e-13 0.0 1.273256042644459341234047913889575417736840342891449084914798449725665720403453e-16 0.0
        0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.300304938970806822915700732738318033951976363882972360340642180102187367598858e-11 0.0 1.23838565616267316468161974546506479423997748941235462889584969533541654057034e-14 0.0 0.0
        0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 3.254833435243215826793293479462338998058368738063051980437124489514850599571941e-13 0.0 1.415144971844876446431866730201016955677551625244805208885706299789065478074763e-16 0.0
        0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 7.405002467827812265702651515980814884772605851199673720694995460635046370775821e-15 0.0 0.0
        0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.544049750670308885967384301882097949418851845421252741770575143436110858930493e-16 0.0
        0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.971525130638924600124591780412332734868523067824266439216845122901732098424916e-18
    ]
    normtol = T(1.57)
    ExpAndGram{T,13,typeof(pade_num),typeof(gramcs)}(
        pade_num,
        gramcs,
        normtol,
    )
end
